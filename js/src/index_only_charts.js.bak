import React from 'react';
import ReactDOM from 'react-dom';
import {createStore} from "redux";
import {connect, Provider} from "react-redux";

import * as echarts from "echarts/lib/echarts";
import 'echarts/lib/chart/heatmap';
import PropTypes from 'prop-types';
import { clear } from 'echarts/lib/util/throttle';
import { isEqual } from 'date-fns';
import { bind } from 'zrender/lib/core/util';
import { LineChart } from 'echarts/charts';
import { GridComponent } from 'echarts/components';
import { TooltipComponent, ToolboxComponent, LegendComponent } from 'echarts/components';
import { ScatterChart } from 'echarts/charts';
import { BarChart } from 'echarts/charts';
import 'echarts/lib/component/legend';
// 引入dataZoom
import 'echarts/lib/component/dataZoom';


const pick = (obj, keys) => {
    const t = {};
    keys.forEach(key => {
        t[key] = obj[key];
    });
    return t;
};

const experimentConfig4Step = {
    cv: true,
    nFolds: 3,
};

class TrialChart extends React.Component {

    constructor(props) {
        super(props);
        this.echartsLib = echarts;
        this.echartsElement = null;
    }

    componentDidMount() {

        echarts.use([LineChart, GridComponent, TooltipComponent, ToolboxComponent, LegendComponent, ScatterChart, BarChart]);  // this should be above of init echarts

        const echartsObj = this.echartsLib.init(this.echartsElement, this.props.theme, this.props.opts);

        const options = this.getChartOptions([], [], [], this.props.experimentConfig.cv, this.props.experimentConfig.nFolds);

        echartsObj.setOption(options, false, false);

        const onClickFunc = this.props.onClick;

        if(onClickFunc !== null && onClickFunc !== undefined){
            echartsObj.on('click', onClickFunc);
        };

        window.addEventListener('resize', () => {
            if (echartsObj) echartsObj.resize();
        });

        if (this.props.showLoading) {
            echartsObj.showLoading(this.props.loadingOption || null);
        } else {
            echartsObj.hideLoading();
        }
    }

    getChartOptions(xAxisData, elapsedSeriesData, modelsScore, cv, nFolds){
        // [ [0.5,0.5,0.9], [0.5,0.5,0.9] ]

        const scoreSeries = [];
        if(cv === false){
            scoreSeries.push( {
                name: 'Reward',
                type: 'line',
                color: '#9EDF81',
                yAxisIndex: 1,
                data: modelsScore[0]
            })
        }else{

            Array.from({length: nFolds}, (k, v)=>v).map(i=>{
                scoreSeries.push( {
                    name: `fold_${i}`,
                    type: 'scatter',
                    color: '#9EDF81',
                    yAxisIndex: 1,
                    data: scoreSeries.map( (scores) => scores[i])
                })
            });

            // calc avg
            scoreSeries.push({
                name: 'Average',
                type: 'line',
                color: 'red',
                yAxisIndex: 1,
                data: scoreSeries.map(v => v.avgReward)
            })}

        const colors = ['#5470C6', '#91CC75', '#EE6666'];

        return {
            color: colors,
            tooltip: {
                trigger: 'axis',
                axisPointer: {
                    type: 'cross'
                }
            },
            grid: {
                right: '20%'
            },
            toolbox: {

            },
            legend: {
                data: []
            },
            xAxis: [
                {
                    type: 'category',
                    // axisTick: {
                    //     alignWithLabel: true
                    // },
                    data: xAxisData
                }
            ],
            dataZoom: [
                {
                    type: 'inside',
                    start: 0,
                    end: 100
                },
                {
                    show: true,
                    type: 'slider',
                    top: '90%',
                    start: 50,
                    end: 100
                }
            ],
            yAxis: [
                {
                    type: 'value',
                    name: 'Elapsed',
                    min: 0,
                    max: 30,
                    position: 'right',
                    axisLine: {
                        show: true,
                        lineStyle: {
                            color: colors[2]
                        }
                    },
                    axisLabel: {
                        formatter: '{value} min'
                    }
                },
                {
                    type: 'value',
                    name: 'Reward',
                    min: 0,
                    max: 1,
                    position: 'left',
                    axisLine: {
                        show: true,
                        lineStyle: {
                            color: colors[0]
                        }
                    },
                    axisLabel: {
                        formatter: '{value}'
                    }
                }
            ],
            series: [
                ...scoreSeries,
                {
                    name: 'Elapsed',
                    type: 'bar',
                    color: '#4F69BB',
                    data: elapsedSeriesData
                },

            ]
        };

    }

    componentDidUpdate(prevProps) {  // 第二次更新时候执行了这个方法
        const prevNewTrialData = prevProps.newTrialData == null ? {}: prevProps.newTrialData;
        const thisNewTrialData = this.props.newTrialData;

        if(thisNewTrialData != null ) {
            if(prevNewTrialData.trialNo !== thisNewTrialData.trialNo){
                // try to update data
                this.props.trials.push(thisNewTrialData);
                // 生成options
                // 生成x坐标轴数据
                const trials = this.props.trials;
                const xAxisData = trials.map(v => {
                    return `#${v.trialNo}`
                });

                // 生成耗时的数据
                const elapseSeriesData = trials.map(value => {
                    return (value.elapsed / 60).toFixed(0)
                });

                // 生成模型的 reward 数据
                var nModles = 1;
                if (this.props.experimentConfig.cv === true) {
                    nModles = this.props.experimentConfig.nFolds;
                }

                // 生成模型的分数数据
                const rewardSeriesData = Array.from({length: nModles}, (k, v) => v).map(i => {
                    return trials.map(v => v.models[i].reward)
                });

                const chartOptions = this.getChartOptions(xAxisData, elapseSeriesData, rewardSeriesData, this.props.experimentConfig.cv, this.props.experimentConfig.nFolds);

                // fixme check echartsElement is not empty
                const echartsObj = this.echartsLib.getInstanceByDom(this.echartsElement);
                echartsObj.setOption(chartOptions, false, false);
            }
        }

    }

    componentWillUnmount() {
        this.dispose();
    }

    dispose = () => {
        if (this.echartsElement) {
            try {
                clear(this.echartsElement);
            } catch (e) {
                console.warn(e);
            }
            this.echartsLib.dispose(this.echartsElement);
        }
    };

    render() {
        const { style, className } = this.props;
        const styleConfig = {
            height: 300,
            ...style,
        };
        return (
            <div
                ref={(e) => { this.echartsElement = e; }}
                style={styleConfig}
                className={className}
            />
        );
    }
}

TrialChart.propTypes = {
    newTrialData: PropTypes.object,
    trials: PropTypes.array,
    experimentConfig: PropTypes.object,
    showLoading: PropTypes.bool,
    loadingOption: PropTypes.object,
    theme: PropTypes.oneOfType([
        PropTypes.string,
        PropTypes.object,
    ]),

};

TrialChart.defaultProps = {
    newTrialData: null,
    trials: [],
    experimentConfig: {},
    showLoading: false,
    loadingOption: null,
    theme: null,
};


// Store
export const store = createStore(experimentReducer);


// Reducer
function experimentReducer(state={} , action) {
    // Transform action to state
    const {type} = action;
    if(type === 'update'){
        return  {newTrialData: action.data}
    }else{
        return state;
    }
}


// Map Redux state to component props
function mapStateToProps(state) {
    console.info("state:");
    console.info(state);
    return state
}

// Map Redux actions to component props
function mapDispatchToProps(dispatch) {
    return {dispatch}
}

// Connected Component
const MyChartContainer = connect(
    mapStateToProps,
    mapDispatchToProps
)(TrialChart);


ReactDOM.render(
    <Provider store={store}>
        <MyChartContainer newTrialData={{}} trials={[]} experimentConfig={{cv: false ,nFolds: 0}}  />
    </Provider>,
    document.getElementById('root')
);

const newTrialDataExample = [{
    trialNo: 1,
    hyperParams: {
        max_depth: 10,
        n_estimator: 100
    },
    models: [
        {
            reward: 0.7,
            fold: 1,
            importances: [
                {name: 'age', importance: 0.1}
            ]
        }
    ],
    avgReward: 0.7,
    elapsed: 100,
    metricName: 'auc'
}];

var trialNoIndex = 0;
setInterval(function () {
    trialNoIndex = trialNoIndex + 1;
    store.dispatch(
        {
            type: 'update',
            data: {
                trialNo: trialNoIndex,
                hyperParams: {
                    max_depth: 10,
                    n_estimator: 100
                },
                models: [
                    {
                        reward: 0.7,
                        fold: 1,
                        importances: [
                            {name: 'age', importance: 0.1}
                        ]
                    }
                ],
                avgReward: 0.7,
                elapsed: 100,
                metricName: 'auc'
            }
        }
    )
}, 1000);

